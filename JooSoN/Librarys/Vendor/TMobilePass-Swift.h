#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.4 effective-4.2 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TMobilePass",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol NORBluetoothManagerDelegate;
@class CBCentralManager;
@class TMobilePass;
@class CBPeripheral;
@class CBService;
@class CBCharacteristic;
@class CBDescriptor;

SWIFT_CLASS("_TtC11TMobilePass19NORBluetoothManager") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface NORBluetoothManager : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
@property (nonatomic, strong) id <NORBluetoothManagerDelegate> _Nullable delegate;
- (nonnull instancetype)initWithManager:(CBCentralManager * _Nonnull)aManager withMobilepass:(TMobilePass * _Nonnull)aMobilePass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)setNegotiationWithText:(NSString * _Nonnull)Token;
- (NSString * _Nonnull)getTrnValue SWIFT_WARN_UNUSED_RESULT;
- (void)setTrnValueWithTrnvalue:(NSString * _Nonnull)TrnValue;
/// Connects to the given peripheral.
/// \param aPeripheral target peripheral to connect to
///
- (void)connectPeripheralWithPeripheral:(CBPeripheral * _Nonnull)aPeripheral;
/// Disconnects or cancels pending connection.
/// The delegate’s didDisconnectPeripheral() method will be called when device got disconnected.
- (void)cancelPeripheralConnection;
/// Returns true if the peripheral device is connected, false otherwise
///
/// returns:
/// true if device is connected
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
/// This method sends the given test to the UART RX characteristic.
/// Depending on whether the characteristic has the Write Without Response or Write properties the behaviour is different.
/// In the latter case the Long Write may be used. To enable it you have to change the flag below in the code.
/// Otherwise, in both cases, texts longer than 20 (MTU) bytes (not characters) will be splitted into up-to 20-byte packets.
/// \param aText text to be sent to the peripheral using Nordic UART Service
///
- (void)sendWithText:(NSString * _Nonnull)aText;
/// Sends the given text to the UART RX characteristic using the given write type.
/// This method does not split the text into parts. If the given write type is withResponse
/// and text is longer than 20-bytes the long write will be used.
/// \param aText text to be sent to the peripheral using Nordic UART Service
///
/// \param aType write type to be used
///
- (void)sendWithText:(NSString * _Nonnull)aText withType:(CBCharacteristicWriteType)aType;
/// Sends the given text to the UART RX characteristic using the given write type.
/// This method does not split the text into parts. If the given write type is withResponse
/// and text is longer than 20-bytes the long write will be used.
/// \param aText text to be sent to the peripheral using Nordic UART Service
///
/// \param aType write type to be used
///
- (void)sendBytesWithText:(NSString * _Nonnull)aText withType:(CBCharacteristicWriteType)aType;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForDescriptor:(CBDescriptor * _Nonnull)descriptor error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP11TMobilePass27NORBluetoothManagerDelegate_")
@protocol NORBluetoothManagerDelegate
- (void)didConnectPeripheralWithDeviceName:(NSString * _Nullable)aName;
- (void)didDisconnectPeripheral;
- (void)peripheralReady;
- (void)peripheralNotSupported;
- (void)didBleRequestPhoneNo;
- (void)didBleSetTokenProcessWithTocken:(NSString * _Nullable)Token json:(NSString * _Nullable)jsonString;
@end


SWIFT_PROTOCOL("_TtP11TMobilePass18NORScannerDelegate_")
@protocol NORScannerDelegate
- (void)centralManagerDidSelectPeripheralWithManager:(CBCentralManager * _Nonnull)aManager andPeripheral:(CBPeripheral * _Nonnull)aPeripheral;
@end


SWIFT_CLASS("_TtC11TMobilePass21NORServiceIdentifiers")
@interface NORServiceIdentifiers : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uartServiceUUIDString;)
+ (NSString * _Nonnull)uartServiceUUIDString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uartTXCharacteristicUUIDString;)
+ (NSString * _Nonnull)uartTXCharacteristicUUIDString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uartRXCharacteristicUUIDString;)
+ (NSString * _Nonnull)uartRXCharacteristicUUIDString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MOBILEPASS_OPERATION_MODE : NSInteger;
enum MOBILEPASS_NFC_USE_MODE : NSInteger;
@class NSNumber;
enum BLE_MODEL : NSInteger;
@class NFCNDEFMessage;
@protocol NFCNDEFReaderSessionDelegate;
@class NFCNDEFReaderSession;

SWIFT_CLASS("_TtC11TMobilePass11TMobilePass") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface TMobilePass : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) enum MOBILEPASS_OPERATION_MODE bOperationMode;
@property (nonatomic) enum MOBILEPASS_NFC_USE_MODE bNfcMode;
@property (nonatomic) BOOL bNdefCompleteFlag;
@property (nonatomic, copy) NSString * _Nonnull sBlePrefixName;
@property (nonatomic, copy) NSString * _Nonnull sBleTPrefixName;
@property (nonatomic, copy) NSString * _Nonnull sBleName;
- (nonnull instancetype)initWithOperationmode:(enum MOBILEPASS_OPERATION_MODE)boperationmode OBJC_DESIGNATED_INITIALIZER;
/// Returns Current Mode
/// NFC_BLE_PLAIN_TEXT_MODE : 0
/// NFC_BLE_PLAIN_TEXT_MODE : 1
- (enum MOBILEPASS_OPERATION_MODE)getOperationMode SWIFT_WARN_UNUSED_RESULT;
/// Set Current Mode
/// NFC_BLE_PLAIN_TEXT_MODE : 0
/// NFC_BLE_PLAIN_TEXT_MODE : 1
- (void)setOperationModeWithOperationmode:(enum MOBILEPASS_OPERATION_MODE)boperationmode;
/// Returns Current Mode
/// NDEF_DETECTION_BLE_MODE : 0
/// NFC_EVENT_BLE_MODE : 1
- (enum MOBILEPASS_NFC_USE_MODE)getNfcUseMode SWIFT_WARN_UNUSED_RESULT;
/// Set Current Mode
/// NDEF_DETECTION_BLE_MODE : 0
/// NFC_EVENT_BLE_MODE : 1
- (void)setNfcUseModeWithOperationmode:(enum MOBILEPASS_NFC_USE_MODE)boperationmode;
/// Returns true if the ndef message completed , false otherwise
- (BOOL)isNdefCompleted SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the ndef message , false otherwise
- (void)NdefCompletedWithNdefcompleteflag:(BOOL)bndefcomplete;
/// Returns BLE DeviceName
- (NSString * _Nonnull)getBleDeviceName SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the ble is available  , false otherwise
/// RSSI Value -51 은 WT51822-S4AT 모델인 경우
- (BOOL)isMobilePassAvailableWithRssi:(NSNumber * _Nonnull)lrssi blemodel:(enum BLE_MODEL)lblemodel SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)ndefmessageparseWithDidDetectNDEFs:(NSArray<NFCNDEFMessage *> * _Nonnull)messages SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)MobilePassAuthenticateProcessWithNorbluetoothmanager:(NORBluetoothManager * _Nonnull)norbluetoothManager trnvalue:(NSString * _Nonnull)TrnValue tocken:(NSString * _Nonnull)Token;
/// NFCNDEFReadSession Create
- (NFCNDEFReaderSession * _Nonnull)NfcNdefSessionCreateWithDelegate:(id <NFCNDEFReaderSessionDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=11.0);
/// NFCNDEFReadSession Re Create
- (NFCNDEFReaderSession * _Nonnull)NfcNdefRevokeWithDelegate:(id <NFCNDEFReaderSessionDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)MobilePassSendPhoneNoWithNorbluetoothmanager:(NORBluetoothManager * _Nonnull)norbluetoothManager;
- (BOOL)MobilePassSaveTokenWithNorbluetoothmanager:(NORBluetoothManager * _Nonnull)norbluetoothManager tocken:(NSString * _Nullable)Token SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getPhoneNoPreference SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setPhoneNoPreferenceWithTocken:(NSString * _Nullable)Token SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getTokenPreference SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setTokenPreferenceWithTocken:(NSString * _Nullable)Token SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getCompanyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setKeyValuePreferenceWithKeyname:(NSString * _Nullable)KeyName keyvalue:(NSString * _Nullable)KeyValue SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getKeyValuePreferenceWithKeyname:(NSString * _Nullable)KeyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setCompanyNameWithCompanyname:(NSString * _Nullable)CompanyName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getUserName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setUserNameWithUsername:(NSString * _Nullable)UserName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getUserId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setUserIdWithUsername:(NSString * _Nullable)UserId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getVendorIdentier SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)getHrn SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)getTrn SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, MOBILEPASS_OPERATION_MODE, open) {
  MOBILEPASS_OPERATION_MODENFC_BLE_PLAIN_TEXT_MODE = 0,
  MOBILEPASS_OPERATION_MODENFC_BLE_CRYPTO_MODE = 1,
};

typedef SWIFT_ENUM(NSInteger, MOBILEPASS_NFC_USE_MODE, open) {
  MOBILEPASS_NFC_USE_MODENDEF_DECTION_MODE = 0,
  MOBILEPASS_NFC_USE_MODENFC_EVENT_MODE = 1,
};

typedef SWIFT_ENUM(NSInteger, BLE_MODEL, open) {
  BLE_MODELWT51822S4AT = 0,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.4 effective-4.2 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TMobilePass",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol NORBluetoothManagerDelegate;
@class CBCentralManager;
@class TMobilePass;
@class CBPeripheral;
@class CBService;
@class CBCharacteristic;
@class CBDescriptor;

SWIFT_CLASS("_TtC11TMobilePass19NORBluetoothManager") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface NORBluetoothManager : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
@property (nonatomic, strong) id <NORBluetoothManagerDelegate> _Nullable delegate;
- (nonnull instancetype)initWithManager:(CBCentralManager * _Nonnull)aManager withMobilepass:(TMobilePass * _Nonnull)aMobilePass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)setNegotiationWithText:(NSString * _Nonnull)Token;
- (NSString * _Nonnull)getTrnValue SWIFT_WARN_UNUSED_RESULT;
- (void)setTrnValueWithTrnvalue:(NSString * _Nonnull)TrnValue;
/// Connects to the given peripheral.
/// \param aPeripheral target peripheral to connect to
///
- (void)connectPeripheralWithPeripheral:(CBPeripheral * _Nonnull)aPeripheral;
/// Disconnects or cancels pending connection.
/// The delegate’s didDisconnectPeripheral() method will be called when device got disconnected.
- (void)cancelPeripheralConnection;
/// Returns true if the peripheral device is connected, false otherwise
///
/// returns:
/// true if device is connected
- (BOOL)isConnected SWIFT_WARN_UNUSED_RESULT;
/// This method sends the given test to the UART RX characteristic.
/// Depending on whether the characteristic has the Write Without Response or Write properties the behaviour is different.
/// In the latter case the Long Write may be used. To enable it you have to change the flag below in the code.
/// Otherwise, in both cases, texts longer than 20 (MTU) bytes (not characters) will be splitted into up-to 20-byte packets.
/// \param aText text to be sent to the peripheral using Nordic UART Service
///
- (void)sendWithText:(NSString * _Nonnull)aText;
/// Sends the given text to the UART RX characteristic using the given write type.
/// This method does not split the text into parts. If the given write type is withResponse
/// and text is longer than 20-bytes the long write will be used.
/// \param aText text to be sent to the peripheral using Nordic UART Service
///
/// \param aType write type to be used
///
- (void)sendWithText:(NSString * _Nonnull)aText withType:(CBCharacteristicWriteType)aType;
/// Sends the given text to the UART RX characteristic using the given write type.
/// This method does not split the text into parts. If the given write type is withResponse
/// and text is longer than 20-bytes the long write will be used.
/// \param aText text to be sent to the peripheral using Nordic UART Service
///
/// \param aType write type to be used
///
- (void)sendBytesWithText:(NSString * _Nonnull)aText withType:(CBCharacteristicWriteType)aType;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForDescriptor:(CBDescriptor * _Nonnull)descriptor error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP11TMobilePass27NORBluetoothManagerDelegate_")
@protocol NORBluetoothManagerDelegate
- (void)didConnectPeripheralWithDeviceName:(NSString * _Nullable)aName;
- (void)didDisconnectPeripheral;
- (void)peripheralReady;
- (void)peripheralNotSupported;
- (void)didBleRequestPhoneNo;
- (void)didBleSetTokenProcessWithTocken:(NSString * _Nullable)Token json:(NSString * _Nullable)jsonString;
@end


SWIFT_PROTOCOL("_TtP11TMobilePass18NORScannerDelegate_")
@protocol NORScannerDelegate
- (void)centralManagerDidSelectPeripheralWithManager:(CBCentralManager * _Nonnull)aManager andPeripheral:(CBPeripheral * _Nonnull)aPeripheral;
@end


SWIFT_CLASS("_TtC11TMobilePass21NORServiceIdentifiers")
@interface NORServiceIdentifiers : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uartServiceUUIDString;)
+ (NSString * _Nonnull)uartServiceUUIDString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uartTXCharacteristicUUIDString;)
+ (NSString * _Nonnull)uartTXCharacteristicUUIDString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uartRXCharacteristicUUIDString;)
+ (NSString * _Nonnull)uartRXCharacteristicUUIDString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MOBILEPASS_OPERATION_MODE : NSInteger;
enum MOBILEPASS_NFC_USE_MODE : NSInteger;
@class NSNumber;
enum BLE_MODEL : NSInteger;
@class NFCNDEFMessage;
@protocol NFCNDEFReaderSessionDelegate;
@class NFCNDEFReaderSession;

SWIFT_CLASS("_TtC11TMobilePass11TMobilePass") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface TMobilePass : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) enum MOBILEPASS_OPERATION_MODE bOperationMode;
@property (nonatomic) enum MOBILEPASS_NFC_USE_MODE bNfcMode;
@property (nonatomic) BOOL bNdefCompleteFlag;
@property (nonatomic, copy) NSString * _Nonnull sBlePrefixName;
@property (nonatomic, copy) NSString * _Nonnull sBleTPrefixName;
@property (nonatomic, copy) NSString * _Nonnull sBleName;
- (nonnull instancetype)initWithOperationmode:(enum MOBILEPASS_OPERATION_MODE)boperationmode OBJC_DESIGNATED_INITIALIZER;
/// Returns Current Mode
/// NFC_BLE_PLAIN_TEXT_MODE : 0
/// NFC_BLE_PLAIN_TEXT_MODE : 1
- (enum MOBILEPASS_OPERATION_MODE)getOperationMode SWIFT_WARN_UNUSED_RESULT;
/// Set Current Mode
/// NFC_BLE_PLAIN_TEXT_MODE : 0
/// NFC_BLE_PLAIN_TEXT_MODE : 1
- (void)setOperationModeWithOperationmode:(enum MOBILEPASS_OPERATION_MODE)boperationmode;
/// Returns Current Mode
/// NDEF_DETECTION_BLE_MODE : 0
/// NFC_EVENT_BLE_MODE : 1
- (enum MOBILEPASS_NFC_USE_MODE)getNfcUseMode SWIFT_WARN_UNUSED_RESULT;
/// Set Current Mode
/// NDEF_DETECTION_BLE_MODE : 0
/// NFC_EVENT_BLE_MODE : 1
- (void)setNfcUseModeWithOperationmode:(enum MOBILEPASS_NFC_USE_MODE)boperationmode;
/// Returns true if the ndef message completed , false otherwise
- (BOOL)isNdefCompleted SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the ndef message , false otherwise
- (void)NdefCompletedWithNdefcompleteflag:(BOOL)bndefcomplete;
/// Returns BLE DeviceName
- (NSString * _Nonnull)getBleDeviceName SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the ble is available  , false otherwise
/// RSSI Value -51 은 WT51822-S4AT 모델인 경우
- (BOOL)isMobilePassAvailableWithRssi:(NSNumber * _Nonnull)lrssi blemodel:(enum BLE_MODEL)lblemodel SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)ndefmessageparseWithDidDetectNDEFs:(NSArray<NFCNDEFMessage *> * _Nonnull)messages SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)MobilePassAuthenticateProcessWithNorbluetoothmanager:(NORBluetoothManager * _Nonnull)norbluetoothManager trnvalue:(NSString * _Nonnull)TrnValue tocken:(NSString * _Nonnull)Token;
/// NFCNDEFReadSession Create
- (NFCNDEFReaderSession * _Nonnull)NfcNdefSessionCreateWithDelegate:(id <NFCNDEFReaderSessionDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=11.0);
/// NFCNDEFReadSession Re Create
- (NFCNDEFReaderSession * _Nonnull)NfcNdefRevokeWithDelegate:(id <NFCNDEFReaderSessionDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)MobilePassSendPhoneNoWithNorbluetoothmanager:(NORBluetoothManager * _Nonnull)norbluetoothManager;
- (BOOL)MobilePassSaveTokenWithNorbluetoothmanager:(NORBluetoothManager * _Nonnull)norbluetoothManager tocken:(NSString * _Nullable)Token SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getPhoneNoPreference SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setPhoneNoPreferenceWithTocken:(NSString * _Nullable)Token SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getTokenPreference SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setTokenPreferenceWithTocken:(NSString * _Nullable)Token SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getCompanyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setKeyValuePreferenceWithKeyname:(NSString * _Nullable)KeyName keyvalue:(NSString * _Nullable)KeyValue SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getKeyValuePreferenceWithKeyname:(NSString * _Nullable)KeyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setCompanyNameWithCompanyname:(NSString * _Nullable)CompanyName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getUserName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setUserNameWithUsername:(NSString * _Nullable)UserName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Null_unspecified)getUserId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setUserIdWithUsername:(NSString * _Nullable)UserId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getVendorIdentier SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)getHrn SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)getTrn SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, MOBILEPASS_OPERATION_MODE, open) {
  MOBILEPASS_OPERATION_MODENFC_BLE_PLAIN_TEXT_MODE = 0,
  MOBILEPASS_OPERATION_MODENFC_BLE_CRYPTO_MODE = 1,
};

typedef SWIFT_ENUM(NSInteger, MOBILEPASS_NFC_USE_MODE, open) {
  MOBILEPASS_NFC_USE_MODENDEF_DECTION_MODE = 0,
  MOBILEPASS_NFC_USE_MODENFC_EVENT_MODE = 1,
};

typedef SWIFT_ENUM(NSInteger, BLE_MODEL, open) {
  BLE_MODELWT51822S4AT = 0,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
