// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 effective-4.2 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name TMobilePass
import AudioToolbox
import CommonCrypto
import CoreBluetooth
import CoreNFC
import Foundation
import Swift
import UIKit
public enum CryptoError : Swift.Error {
  case illegalParameter
  case bufferTooSmall
  case memoryFailure
  case alignmentError
  case decodeError
  case overflow
  case rngFailure
  case callSequenceError
  case keySizeError
  case unimplemented
  case unspecifiedError
  case unknownError(CommonCrypto.CCStatus)
  case unknownStatus(Darwin.OSStatus)
}
extension CryptoError : Swift.Equatable {
  public static func == (lhs: TMobilePass.CryptoError, rhs: TMobilePass.CryptoError) -> Swift.Bool
}
@objc public protocol NORScannerDelegate {
  @objc func centralManagerDidSelectPeripheral(withManager aManager: CoreBluetooth.CBCentralManager, andPeripheral aPeripheral: CoreBluetooth.CBPeripheral)
}
@objc public protocol NORBluetoothManagerDelegate {
  @objc func didConnectPeripheral(deviceName aName: Swift.String?)
  @objc func didDisconnectPeripheral()
  @objc func peripheralReady()
  @objc func peripheralNotSupported()
  @objc func didBleRequestPhoneNo()
  @objc func didBleSetTokenProcess(tocken Token: Swift.String?, json jsonString: Swift.String?)
}
@available(iOS 11.0, *)
@objc public class NORBluetoothManager : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralDelegate, CoreBluetooth.CBCentralManagerDelegate {
  @objc public var delegate: TMobilePass.NORBluetoothManagerDelegate?
  public enum ENUM_DCC_STATUS {
    case SELECT_FILE
    case GET_DATA
    case GET_TOKEN
    case PUT_TOKEN
    case REVEICE
    case NONE
    public static func == (a: TMobilePass.NORBluetoothManager.ENUM_DCC_STATUS, b: TMobilePass.NORBluetoothManager.ENUM_DCC_STATUS) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @available(iOS 11.0, *)
  @objc required public init(withManager aManager: CoreBluetooth.CBCentralManager, withMobilepass aMobilePass: TMobilePass.TMobilePass)
  @objc public func setNegotiation(text Token: Swift.String)
  public func getDccStatus() -> TMobilePass.NORBluetoothManager.ENUM_DCC_STATUS
  @objc public func getTrnValue() -> Swift.String
  @objc public func setTrnValue(trnvalue TrnValue: Swift.String)
  @objc public func connectPeripheral(peripheral aPeripheral: CoreBluetooth.CBPeripheral)
  @objc public func cancelPeripheralConnection()
  @objc public func isConnected() -> Swift.Bool
  @objc public func send(text aText: Swift.String)
  @objc public func send(text aText: Swift.String, withType aType: CoreBluetooth.CBCharacteristicWriteType)
  @objc public func sendBytes(text aText: Swift.String, withType aType: CoreBluetooth.CBCharacteristicWriteType)
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor descriptor: CoreBluetooth.CBDescriptor, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc deinit
  @objc override dynamic public init()
}
public enum Cryptor {
  case aes128
  case aes192
  case aes256
  case des
  case tripleDES
  public static func == (a: TMobilePass.Cryptor, b: TMobilePass.Cryptor) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension Cryptor {
  public var keySize: Swift.Int {
    get
  }
  public var blockSize: Swift.Int {
    get
  }
}
extension Cryptor {
  public func encrypt(data: Foundation.Data, withKey key: Foundation.Data, iv: Foundation.Data, usePKCS7: Swift.Bool = false) throws -> Foundation.Data
  public func decrypt(data: Foundation.Data, withKey key: Foundation.Data, iv: Foundation.Data, usePKCS7: Swift.Bool = false) throws -> Foundation.Data
}
@_inheritsConvenienceInitializers @available(iOS 11.0, *)
@objc public class TMobilePass : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  @objc public enum MOBILEPASS_OPERATION_MODE : Swift.Int {
    case NFC_BLE_PLAIN_TEXT_MODE
    case NFC_BLE_CRYPTO_MODE
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum MOBILEPASS_NFC_USE_MODE : Swift.Int {
    case NDEF_DECTION_MODE
    case NFC_EVENT_MODE
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum BLE_MODEL : Swift.Int {
    case WT51822S4AT
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var bOperationMode: TMobilePass.TMobilePass.MOBILEPASS_OPERATION_MODE
  @objc public var bNfcMode: TMobilePass.TMobilePass.MOBILEPASS_NFC_USE_MODE
  @objc public var bNdefCompleteFlag: Swift.Bool
  @objc public var sBlePrefixName: Swift.String
  @objc public var sBleTPrefixName: Swift.String
  @objc public var sBleName: Swift.String
  @objc required public init(operationmode boperationmode: TMobilePass.TMobilePass.MOBILEPASS_OPERATION_MODE)
  @objc public func getOperationMode() -> TMobilePass.TMobilePass.MOBILEPASS_OPERATION_MODE
  @objc public func setOperationMode(operationmode boperationmode: TMobilePass.TMobilePass.MOBILEPASS_OPERATION_MODE)
  @objc public func getNfcUseMode() -> TMobilePass.TMobilePass.MOBILEPASS_NFC_USE_MODE
  @objc public func setNfcUseMode(operationmode boperationmode: TMobilePass.TMobilePass.MOBILEPASS_NFC_USE_MODE)
  @objc public func isNdefCompleted() -> Swift.Bool
  @objc public func NdefCompleted(ndefcompleteflag bndefcomplete: Swift.Bool)
  @objc public func getBleDeviceName() -> Swift.String
  @objc public func isMobilePassAvailable(rssi lrssi: Foundation.NSNumber, blemodel lblemodel: TMobilePass.TMobilePass.BLE_MODEL) -> Swift.Bool
  @available(iOS 11.0, *)
  @objc public func ndefmessageparse(didDetectNDEFs messages: [CoreNFC.NFCNDEFMessage]) -> Swift.String
  @objc public func MobilePassAuthenticateProcess(norbluetoothmanager norbluetoothManager: TMobilePass.NORBluetoothManager, trnvalue TrnValue: Swift.String, tocken Token: Swift.String)
  @available(iOS 11.0, *)
  @objc public func NfcNdefSessionCreate(delegate: CoreNFC.NFCNDEFReaderSessionDelegate) -> CoreNFC.NFCNDEFReaderSession
  @available(iOS 11.0, *)
  @objc public func NfcNdefRevoke(delegate: CoreNFC.NFCNDEFReaderSessionDelegate) -> CoreNFC.NFCNDEFReaderSession
  @objc public func MobilePassSendPhoneNo(norbluetoothmanager norbluetoothManager: TMobilePass.NORBluetoothManager)
  @objc public func MobilePassSaveToken(norbluetoothmanager norbluetoothManager: TMobilePass.NORBluetoothManager, tocken Token: Swift.String?) -> Swift.Bool
  @objc public func getPhoneNoPreference() -> Swift.String!
  @objc public func setPhoneNoPreference(tocken Token: Swift.String?) -> Swift.Bool
  @objc public func getTokenPreference() -> Swift.String!
  @objc public func setTokenPreference(tocken Token: Swift.String?) -> Swift.Bool
  @objc public func getCompanyName() -> Swift.String!
  @objc public func setKeyValuePreference(keyname KeyName: Swift.String?, keyvalue KeyValue: Swift.String?) -> Swift.Bool
  @objc public func getKeyValuePreference(keyname KeyName: Swift.String?) -> Swift.String!
  @objc public func setCompanyName(companyname CompanyName: Swift.String?) -> Swift.Bool
  @objc public func getUserName() -> Swift.String!
  @objc public func setUserName(username UserName: Swift.String?) -> Swift.Bool
  @objc public func getUserId() -> Swift.String!
  @objc public func setUserId(username UserId: Swift.String?) -> Swift.Bool
  @objc public func getVendorIdentier() -> Swift.String
  @objc public func getHrn() -> Foundation.Data
  @objc public func getTrn() -> Foundation.Data
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NORServiceIdentifiers : ObjectiveC.NSObject {
  @objc public static let uartServiceUUIDString: Swift.String
  @objc public static let uartTXCharacteristicUUIDString: Swift.String
  @objc public static let uartRXCharacteristicUUIDString: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@available(iOS 11.0, *)
extension TMobilePass.NORBluetoothManager.ENUM_DCC_STATUS : Swift.Equatable {}
@available(iOS 11.0, *)
extension TMobilePass.NORBluetoothManager.ENUM_DCC_STATUS : Swift.Hashable {}
extension TMobilePass.Cryptor : Swift.Equatable {}
extension TMobilePass.Cryptor : Swift.Hashable {}
@available(iOS 11.0, *)
extension TMobilePass.TMobilePass.MOBILEPASS_OPERATION_MODE : Swift.Equatable {}
@available(iOS 11.0, *)
extension TMobilePass.TMobilePass.MOBILEPASS_OPERATION_MODE : Swift.Hashable {}
@available(iOS 11.0, *)
extension TMobilePass.TMobilePass.MOBILEPASS_OPERATION_MODE : Swift.RawRepresentable {}
@available(iOS 11.0, *)
extension TMobilePass.TMobilePass.MOBILEPASS_NFC_USE_MODE : Swift.Equatable {}
@available(iOS 11.0, *)
extension TMobilePass.TMobilePass.MOBILEPASS_NFC_USE_MODE : Swift.Hashable {}
@available(iOS 11.0, *)
extension TMobilePass.TMobilePass.MOBILEPASS_NFC_USE_MODE : Swift.RawRepresentable {}
@available(iOS 11.0, *)
extension TMobilePass.TMobilePass.BLE_MODEL : Swift.Equatable {}
@available(iOS 11.0, *)
extension TMobilePass.TMobilePass.BLE_MODEL : Swift.Hashable {}
@available(iOS 11.0, *)
extension TMobilePass.TMobilePass.BLE_MODEL : Swift.RawRepresentable {}
